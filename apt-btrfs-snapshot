#!/usr/bin/python

import datetime
import os
import string
import subprocess
import sys
import tempfile

class FstabEntry(object):
    @classmethod
    def from_line(cls, line):
        return FstabEntry(*line.split())
    def __init__(self, fs_spec, mountpoint, fstype, options, dump, passno):
        # uuid or device
        self.fs_spec = fs_spec
        self.mountpoint = mountpoint
        self.fstype = fstype
        self.options = options
        self.dump = dump
        self.passno = passno
    def __repr__(self):
        return "<FstabEntry '%s' '%s' '%s' '%s' '%s' '%s'>" % (
            self.fs_spec, self.mountpoint, self.fstype,
            self.options, self.dump, self.passno)

class Fstab(list):
    def __init__(self, fstab="/etc/fstab"):
        super(Fstab, self).__init__()
        for line in map(string.strip, open(fstab)):
            if line == "" or line.startswith("#"):
                continue
            try:
                entry = FstabEntry.from_line(line)
            except ValueError:
                continue
            self.append(entry)

class LowLevelCommands(object):
    def mount(self, fs_spec, mountpoint):
        ret = subprocess.call(["mount", fs_spec, mountpoint])
        return ret == 0
    def umount(self, mountpoint):
        ret = subprocess.call(["umount", mountpoint])
        return ret == 0
    def btrfs_subvolume_snapshot(self, source, dest):
        ret = subprocess.call(["btrfs", "subvolume", "snapshot",
                               source, dest])
        return ret == 0
    def btrfs_delete_snapshot(self, snapshot):
        ret = subprocess.call(["btrfs", "subvolume", "delete", snapshot])
        return ret == 0

class AptBtrfsSnapshots(object):
    # normal snapshot
    SNAP_PREFIX = "@apt-snapshot-"
    # backname when changing
    BACKUP_PREFIX = SNAP_PREFIX+"old-root-"
    
    def __init__(self, fstab="/etc/fstab"):
        self.fstab = Fstab(fstab)
        self.commands = LowLevelCommands()
        self._btrfs_root_mountpoint = None
    def snapshots_supported(self):
        """ verify that the system supports apt btrfs snapshots
            by checking if the right fs layout is used etc
        """
        for entry in self.fstab:
            if (entry.mountpoint == "/" and
                entry.fstype == "btrfs" and
                "subvol=@" in entry.options):
                return True
        return False
    def _uuid_for_mountpoint(self, mountpoint, fstab="/etc/fstab"):
        """ return the device or UUID for the given mountpoint """
        for entry in self.fstab:
            if entry.mountpoint == mountpoint:
                return entry.fs_spec
        return None
    def mount_btrfs_root_volume(self):
        uuid = self._uuid_for_mountpoint("/")
        mountpoint = tempfile.mkdtemp(prefix="apt-btrfs-snapshot-mp-")
        if not self.commands.mount(uuid, mountpoint):
            return None
        self._btrfs_root_mountpoint = mountpoint
        return self._btrfs_root_mountpoint
    def umount_btrfs_root_volume(self):
        res = self.commands.umount(self._btrfs_root_mountpoint)
        os.rmdir(self._btrfs_root_mountpoint)
        self._btrfs_root_mountpoint = None
        return res
    def _get_now_str(self):
        return  datetime.datetime.now().replace(microsecond=0).isoformat("_")
    def create_btrfs_root_snapshot(self):
        mp = self.mount_btrfs_root_volume()
        snap_id = self._get_now_str()
        res = self.commands.btrfs_subvolume_snapshot(
            os.path.join(mp, "@"),
            os.path.join(mp, self.SNAP_PREFIX+snap_id))
        self.umount_btrfs_root_volume()
        return res
    def get_btrfs_root_snapshots_list(self):
        l = []
        mp = self.mount_btrfs_root_volume()
        for e in os.listdir(mp):
            if e.startswith(self.SNAP_PREFIX):
                l.append(e)
        self.umount_btrfs_root_volume()
        return l
    def print_btrfs_root_snapshots(self):
        print "Available snapshots:"
        print "  \n".join(self.get_btrfs_root_snapshots_list())
    def command_set_default(self, snapshot_name):
        self.set_default(snapshot_name)
        print "Please reboot"
    def set_default(self, snapshot_name, backup=True):
        """ set new default """
        mp = self.mount_btrfs_root_volume()
        new_root = os.path.join(mp, snapshot_name)
        default_root = os.path.join(mp, "@")
        backup = os.path.join(mp, self.BACKUP_PREFIX+self._get_now_str())
        os.rename(default_root, backup)
        os.rename(new_root, default_root)
        self.umount_btrfs_root_volume()
        return True
    def delete_snapshot(self, snapshot_name):
        mp = self.mount_btrfs_root_volume()
        res = self.commands.btrfs_delete_snapshot(
            os.path.join(mp, snapshot_name))
        self.umount_btrfs_root_volume()
        return res
    
if __name__ == "__main__":

    # option -> function mapping
    supported_commands = { 'snapshot' : 'create_btrfs_root_snapshot',
                           'list' : 'print_btrfs_root_snapshots',
                           'set-default' : 'command_set_default',
                           'delete' : 'delete_snapshot',
                         }

    if os.getuid() != 0:
        print "Sorry, you need to be root to run this program"
        sys.exit(1)

    apt_btrfs = AptBtrfsSnapshots()
    if not apt_btrfs.snapshots_supported():
        print "Sorry, your system lacks support for the snapshot feature"
        sys.exit(1)

    # poor mans commandline parser
    if len(sys.argv) < 2 or sys.argv[1] not in supported_commands:
        print "supported commands: %s" % ", ".join(supported_commands)        
        sys.exit(1)

    # run it
    command = sys.argv[1]
    if command in supported_commands:
        func = getattr(apt_btrfs, supported_commands[command])
        func(*sys.argv[2:])




